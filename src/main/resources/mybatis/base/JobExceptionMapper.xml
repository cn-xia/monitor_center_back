<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.hdu.back.mapper.JobExceptionMapper" >
  <resultMap id="BaseResultMap" type="org.hdu.back.model.JobException" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="exception_desc" property="exceptionDesc" jdbcType="VARCHAR" />
    <result column="exception_type" property="exceptionType" jdbcType="INTEGER" />
    <result column="monitor_time" property="monitorTime" jdbcType="TIMESTAMP" />
    <result column="job_id" property="jobId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, exception_desc, exception_type, monitor_time, job_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from job_exception
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from job_exception
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.hdu.back.model.JobException" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into job_exception (exception_desc, exception_type, monitor_time, 
      job_id)
    values (#{exceptionDesc,jdbcType=VARCHAR}, #{exceptionType,jdbcType=INTEGER}, #{monitorTime,jdbcType=TIMESTAMP}, 
      #{jobId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.hdu.back.model.JobException" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into job_exception
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="exceptionDesc != null" >
        exception_desc,
      </if>
      <if test="exceptionType != null" >
        exception_type,
      </if>
      <if test="monitorTime != null" >
        monitor_time,
      </if>
      <if test="jobId != null" >
        job_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="exceptionDesc != null" >
        #{exceptionDesc,jdbcType=VARCHAR},
      </if>
      <if test="exceptionType != null" >
        #{exceptionType,jdbcType=INTEGER},
      </if>
      <if test="monitorTime != null" >
        #{monitorTime,jdbcType=TIMESTAMP},
      </if>
      <if test="jobId != null" >
        #{jobId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.hdu.back.model.JobException" >
    update job_exception
    <set >
      <if test="exceptionDesc != null" >
        exception_desc = #{exceptionDesc,jdbcType=VARCHAR},
      </if>
      <if test="exceptionType != null" >
        exception_type = #{exceptionType,jdbcType=INTEGER},
      </if>
      <if test="monitorTime != null" >
        monitor_time = #{monitorTime,jdbcType=TIMESTAMP},
      </if>
      <if test="jobId != null" >
        job_id = #{jobId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.hdu.back.model.JobException" >
    update job_exception
    set exception_desc = #{exceptionDesc,jdbcType=VARCHAR},
      exception_type = #{exceptionType,jdbcType=INTEGER},
      monitor_time = #{monitorTime,jdbcType=TIMESTAMP},
      job_id = #{jobId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>